#+Title: DB Doc

Document your database tables and fields, because you should, and this
makes it easy.

DBDoc enables you to describe your database in a simple ORG file,
which is easy and nice to edit and search in your repo, view in your
SQL client, and publish as docs. This enables other stakeholders
(Product people) to view your DB documentation.

It works by converting a very minimal ORG-valid and -prescribed syntax
into SQL =COMMENT ON= statements, which can be run on your database
(via migration or sourced or however you like).

#+html: <p align="center"><img src="postico.png" /></p>

** Example

The following translation is done, from:

#+begin_src org
#+Title: ACME Corp Customer Database

* customer

The monster that holds the precious user profiles. Used by the traffic
light table to track which users …

- email ::
  The primary contact, taken from Salesforce’s
  =Project.Primary_Contact=. This is redundant with our =lead.contacs=
  data.

- email-data-json ::
  ...

* order

Every purchase made by =customer=s through the old portal. Note that
new purchases by customer through all other systems is recorded in the
=order2= table!

* ops-user

DEPRECATED: replaced by =agent=
#+end_src

to:

#+begin_src sql
COMMENT ON TABLE customer IS 'The monster …';
COMMENT ON COLUMN customer.email IS 'The primary contact, …';
…

COMMENT ON TABLE order IS 'Every purchase …';
…

#+end_src

That SQL is pretty ugly compared to the ORG version – that’s why this
tiny tool exists.

** Installation

- Install [[https://github.com/babashka/babashka#installation][Babashka]].
- Clone this repo and put =dbdoc= on your =PATH=.

** Process

One time only, create a single living .org file in your repo, eg,
=docs/dbdoc.org= for growing docs for your tables.

Set up env vars to control file locations:

#+begin_src shell
export DBDOC_ORG=docs
export DBDOC_SQL=resouces/migrations
export DBDOC_HTML=docs
#+end_src

Then, continually:

- Describe as many tables and columns as you see fit.

- Run =dbdoc docs/dbdoc.org= to generate a time-stamped file like
  =resources/migrations/20201027000000-dbdoc.up.sql=

- Commit both files.

- Run your migration, or just load the new SQL file.

** Showing Comments in Clients

- psql: =\d+=
- mysql: =show full comments from <table_name>=
- [[https://eggerapps.at/postico/][postico]] (see the _Structure_ tab, as shown is screenshot)
- [[https://dataedo.com/kb/tools/dbeaver/how-to-view-and-edit-table-and-column-comments][dbeaver]]
- [[https://postgrest.org/en/v7.0.0/api.html#openapi-support][postgrest/swagger]]
- [[https://dataedo.com/kb/tools/pgadmin/how-to-view-and-edit-table-and-column-comments][pgadmin]]
- [[https://dataedo.com/kb/tools/datagrip/how-to-view-and-edit-table-and-column-comments][datagrip]]

** Transformations

Org uses underscores for italic, and it’s tedious enough to have wrap
every DB entity in equals (+=+) in org to escape them, so they should
instead be documented with hyphens (+-+) (though this isn’t required).
IOW, all ORG hyphenated variables (eg, =my-var-name=) become
underscores in SQL (=my_var_name=). So prefer to use =my-var-name= in
the ORG description.

The parser is really limited and rigid and wants to see a _table_
description for every table you wish to document. So, if you want to
document some column in a table, you must also provide at least a
tidbit sentence for the table too.

Alignment/indentation is important too, so follow the example format
precisely – this is a tiny subset of actual org.

It you use “straight” apostrophes (+'+), they’ll be converted to
curlies so as not to need SQL string escaping (and be prettier).

** Round-Tripping (coming soon)

If you already have comments on your tables, you can pull them into
your ORG doc to still get the benefits of shared editing/viewing. So
if some of your team happens to add comments inside a client,
round-tripping enables never losing data, and keeping your
=dbcoc.org= as the SPOT. (This is coming soon.)

** Seeding an ORG doc file

You can create a listing of all existing public tables as a starter
ORG file: see =schema2org.sh=. Once created, you can just start
documenting!

This will be improved to populate with existing comment descriptions
to enable “round-tripping”.

** Table Documentation Best Practices

- Don’t need to be comprehensive. Docs get stale, and sometimes are ob
- Add tags: legacy-dont-touch
- Used-by
- Gotchas
- Characteristics: huge, static, possible values, performance, hotness
- Deprecation


** Q & A

*Why use org instead of the more popular/common markdown?*

ORG had definition lists. For the limited syntax that is dbdosc,
they’re effectively the same (just use +*+ for heading instead of
+#+).

*How far should I go with documenting my tables?*

Not too far. See recommendations above.

*Why not just write the doc strings in SQL?*

Then your editor would think you’re in SQL mode and wouldn’t do things
like spell-checking or nice formatting. Plus, using ORG gives you a
publishable HTML version of your docs.
